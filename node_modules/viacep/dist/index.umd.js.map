{"version":3,"file":"index.umd.js","sources":["../src/error.ts","../src/request.ts","../src/index.ts"],"sourcesContent":["export class ViaCEPError {\n  status: number\n  statusText: string\n\n  constructor(error: Response) {\n    this.status = error.status\n    this.statusText = error.statusText\n  }\n}\n","import fetch, { Response as FetchResponse } from 'node-fetch'\n\nimport { ViaCEPError } from './error'\n\nexport class Request {\n  request: any\n\n  public async makeApiRequest<Response>(uri: string): Promise<Response> {\n    try {\n      const response = await fetch(`https://viacep.com.br/ws/${uri}/json`, {\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n        },\n      })\n\n      if (!response.ok) {\n        throw response\n      }\n\n      const data = await response.json()\n\n      if (data.erro) {\n        throw new FetchResponse(null, {\n          status: 404,\n          statusText: 'A pesquisa n√£o retornou dados',\n        })\n      }\n\n      return data\n    } catch (error) {\n      switch (error.status) {\n        case 400:\n        case 404:\n          throw new ViaCEPError(error)\n        default:\n          throw error\n      }\n    }\n  }\n}\n","import { Address, State } from './models'\nimport { Request } from './request'\n\nexport * from './models'\n\nexport class ViaCEP {\n  private readonly request: Request\n\n  constructor() {\n    this.request = new Request()\n  }\n\n  async cep(cep: string): Promise<Address>\n  async cep({\n    state,\n    city,\n    street,\n  }: {\n    state: State\n    city: string\n    street: string\n  }): Promise<Address[]>\n  async cep(\n    params:\n      | string\n      | {\n          state: State\n          city: string\n          street: string\n        },\n  ): Promise<Address | Address[]> {\n    if (typeof params === 'string') {\n      return await this.request.makeApiRequest<Address>(`${params}`)\n    }\n    return await this.request.makeApiRequest<Address[]>(\n      encodeURI(`${params.state}/${params.city}/${params.street}`),\n    )\n  }\n}\n"],"names":["ViaCEPError","error","this","status","statusText","Request","makeApiRequest","uri","fetch","headers","Content-Type","response","ok","json","data","erro","FetchResponse","request","cep","params","_this2","encodeURI","state","city","street"],"mappings":"uQAAaA,EAIX,SAAYC,GACVC,KAAKC,OAASF,EAAME,OACpBD,KAAKE,WAAaH,EAAMG,YCFfC,8CAGEC,wBAAyBC,sEAEXC,8BAAkCD,UAAY,CACnEE,QAAS,CACPC,eAAgB,oDAFdC,GAMN,IAAKA,EAASC,GACZ,MAAMD,EARN,uBAWiBA,EAASE,sBAAtBC,GAEN,GAAIA,EAAKC,KACP,UAAUC,WAAc,KAAM,CAC5Bb,OAAQ,IACRC,WAAY,kCAIhB,OAAOU,2EACAb,GACP,OAAQA,EAAME,QACZ,SACA,SACE,UAAUH,EAAYC,GACxB,QACE,MAAMA,MA/BhB,6DCIE,aACEC,KAAKe,QAAU,IAAIZ,qBAafa,aACJC,eASejB,8CAEFkB,EAAKH,QAAQX,eACxBe,UAAaF,EAAOG,UAASH,EAAOI,SAAQJ,EAAOK,2BAJ/B,iBAAXL,6BACIC,EAAKH,QAAQX,kBAA2Ba,wDA3B3D"}